#no_docker_ci_cd.yml
name: (NO DOCKER)CI/CD .Net Core

on: 
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
jobs:
  build_nodocker:
    permissions:
      id-token: write
      contents: read
      attestations: write
    runs-on: ubuntu-22.04
    env:
      build_config: Release
    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: |
            6.0.321
            3.1.426
    - name: Install dotnet tools
      run: dotnet tool restore
    - name: Build with dotnet
      run: dotnet build ./eShopOnWeb.sln --configuration $build_config
    - name: Publish site
      working-directory: ./src/Web
      run: dotnet publish -c $build_config -o ../../web_publish
    - name: Catalog SQL Script
      run: dotnet ef migrations script -c catalogcontext -i -p ./src/Infrastructure/Infrastructure.csproj -s ./src/Web/Web.csproj -o ./scripts/catalog.sql
    - name: Identity SQL Script
      run: dotnet ef migrations script -c appidentitydbcontext  -i -p ./src/Infrastructure/Infrastructure.csproj -s ./src/Web/Web.csproj -o ./scripts/identity.sql
    - name: Upload scripts
      uses: actions/upload-artifact@v4
      with:
        name: sql_scripts
        path: ./scripts
    - name: Upload site
      uses: actions/upload-artifact@v4
      id: upload-web
      with:
        name: web_site
        path: ./web_publish
    - name: Upload ARM
      uses: actions/upload-artifact@v4
      with:
        name: arm_template
        path: arm
    - name: Upload Loadtests
      uses: actions/upload-artifact@v4
      with:
        name: load_tests
        path: load_tests

  deploy_nodocker_dev:    
    needs: build_nodocker
    uses:  ./.github/workflows/reusable-workflow-deploy.yml
    if: github.ref != 'refs/heads/main'
    with:
      resource_group: NetCore_NoDocker_GitHub_DEV_RG
      app_name: netcoregithubdev
      sql_server: netcoregithubdev
      environment_name: dev_nodocker
      slot_name: production
    secrets:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}  
      CONNSTRING_JSON: ${{ secrets.CONNSTRING_JSON }}   
      CATALOG_DB_CONNSTRING: ${{ secrets.CATALOG_DB_CONNSTRING }}   
      IDENTITY_DB_CONNSTRING: ${{ secrets.IDENTITY_DB_CONNSTRING }}   
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}


  deploy_nodocker_pro:
    needs:
      - build_nodocker
    uses:  ./.github/workflows/reusable-workflow-deploy.yml
    if: github.ref == 'refs/heads/main'
    concurrency: cd-pro-${{ github.ref }}
    with:
      resource_group: NetCore_NoDocker_GitHub_PRO_RG
      app_name: netcoregithubpro
      sql_server: netcoregithubpro
      environment_name: pro_nodocker
      slot_name: staging
    secrets:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}  
      CONNSTRING_JSON: ${{ secrets.CONNSTRING_JSON }}   
      CATALOG_DB_CONNSTRING: ${{ secrets.CATALOG_DB_CONNSTRING }}   
      IDENTITY_DB_CONNSTRING: ${{ secrets.IDENTITY_DB_CONNSTRING }}   
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

  swap-slots:
    permissions:
      id-token: write
    needs: deploy_nodocker_pro
    environment: pro_nodocker_swap
    runs-on: ubuntu-latest
    env:
      resource_group: NetCore_NoDocker_GitHub_PRO_RG
      app_name: netcoregithubpro
      slot_name: staging
    steps:
      - name: 'Login via Azure CLI'
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }} 
          enable-AzPSSession: true

      - name: Azure CLI Action
        uses: Azure/cli@v1
        with:        
          inlineScript: az webapp deployment slot swap -g ${{ env.resource_group }} -n ${{ env.app_name }} --slot ${{ env.slot_name }} --target-slot production      


